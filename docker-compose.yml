version: "3.5"

services:
#our application
  service-a:
    build:
      dockerfile: OtelPlayground.ServiceA/Dockerfile
      context: .
    hostname: service-a
    image: otel-playground-service-a
    environment:
      - ServiceName=otel-playground-service-a
      - ASPNETCORE_HTTP_PORTS=80
      - ASPNETCORE_URLS=http://*:80   
    ports:
      - "127.0.0.1:32768:80"
    networks:
      - playground  
  service-b:
    build:
      dockerfile: OtelPlayground.ServiceB/Dockerfile
      context: .
    hostname: service-b
    image: otel-playground-service-b
    environment:
      - ServiceName=otel-playground-service-b
      - ASPNETCORE_HTTP_PORTS=80
      - ASPNETCORE_URLS=http://*:80   
    ports:
      - "127.0.0.1:32770:80"
    networks:
      - playground  
 
#fake user
  fake-user:
    build:
      dockerfile: OtelPlayground.FakeUser/Dockerfile
      context: .
    image: otel-playground-fake-user
    networks:
      - playground
  # spammer:
  #   image: alpine/curl:latest
  #   entrypoint:
  #     - /bin/sh
  #     - -c
  #     - |
  #       sleep 5
  #       while true; do
  #         curl "http://service-a/WeatherForecast/GetAllWeatherForecasts" || true
  #         sleep 1
  #       done
  #   networks:
  #     - playground

#metrics
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus
    networks:
      - playground  
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
    networks:
      - playground  

networks:
  playground:

volumes:
  prom_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "./prometheus_data"
  grafana_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "./grafana_data"
